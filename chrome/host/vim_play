#!/usr/bin/env python

import sys
import struct
import time
import asyncore
import socket
import logging
import json
import HTMLParser

logging.basicConfig(filename='/tmp/chrome.log',level=logging.DEBUG)

class PlayHandler(asyncore.dispatcher_with_send):

  # Handle incoming vim command
  def handle_read(self):
    data = self.recv(8192)
    if data:
      self.write_to_chrome(data)

      # Wait for the response from the browser
      while 1:
        text_length_bytes = sys.stdin.read(4)

        if len(text_length_bytes) > 0:
          text_length = struct.unpack('i', text_length_bytes)[0]

          text = sys.stdin.read(text_length)
          formatted = self.format_song(text)

          self.send(formatted)
          self.close()
          return

        else:
          time.sleep(0.1)

  def handle_error(self):
    logging.exception("handled error")


  def write_to_chrome(self, command_text):
    formatted = { 'command': command_text.rstrip() }
    command = json.dumps(formatted).encode('utf-8')

    logging.debug("writing to chrome " + command)
    sys.stdout.write(struct.pack("I", len(command)))
    sys.stdout.write(command)
    sys.stdout.flush()

  def format_song(self, text):
    track_info = json.loads(text)['track']
    track = {key: track_info[key].encode('utf-8') for key in track_info.keys()}
    formatted = "{} - {}".format(track['artist'], track['song'])
    if track['album']:
      formatted += " / " + track['album']

    h = HTMLParser.HTMLParser()
    return h.unescape(formatted)

class PlayServer(asyncore.dispatcher):

  def __init__(self, host, port):
    asyncore.dispatcher.__init__(self)
    self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
    self.set_reuse_addr()
    self.bind((host, port))
    self.listen(5)

  def handle_accept(self):
    pair = self.accept()
    if pair is not None:
      sock, addr = pair
      handler = PlayHandler(sock)


if __name__ == '__main__':
  try:
    server = PlayServer('localhost', 8123)
    asyncore.loop()
  except:
    logging.exception("global exception")
    raise
